import * as T from './type';
import { QueryFilters, QueryProjection } from "@nexys/fetchr/dist/type";

interface ModelConstraints { [entity: string]: { projection?: QueryProjection; filters?: QueryFilters } }

const admin = (v: { Instance: string | number; User: string | number }) => { return {"Person":{"projection":{"uuid":true,"firstName":true,"lastName":true,"birthDate":true,"deathDate":true,"sex":true,"birthLocation":true},"filters":{}},"PersonConnection":{"projection":{"uuid":true,"source":true,"target":true,"type":true},"filters":{}},"User":{"projection":{"uuid":true,"firstName":true,"lastName":true,"email":true,"logDateAdded":true,"localeLang":true,"status":true,"localeCountry":true},"filters":{"instance":{"uuid":v.Instance}}},"UserAuthentication":{"projection":{"uuid":true,"value":true,"isEnabled":true,"user":true,"type":true},"filters":{}},"Instance":{"projection":{"uuid":true,"name":true,"logDateAdded":true},"filters":{"uuid":v.Instance}},"UserPermission":{"projection":{"uuid":true,"permissionInstance":true,"user":true},"filters":{}},"PermissionInstance":{"projection":{"uuid":true,"permission":true},"filters":{"instance":{"uuid":v.Instance}}},"UserToken":{"projection":{"uuid":true,"user":true,"token":true,"logDateAdded":true,"ip":true,"userAgent":true},"filters":{}}}};
const app = (v: { Instance: string | number; User: string | number }) => { return {"Person":{"projection":{"uuid":true,"firstName":true,"lastName":true,"birthDate":true,"deathDate":true,"sex":true,"birthLocation":true},"filters":{}},"PersonConnection":{"projection":{"uuid":true,"source":true,"target":true,"type":true},"filters":{}},"User":{"projection":{"uuid":true,"firstName":true,"lastName":true,"email":true,"logDateAdded":true,"localeLang":true,"status":true,"localeCountry":true},"filters":{"uuid":v.User,"instance":{"uuid":v.Instance}}},"UserAuthentication":{"projection":{"uuid":true,"value":true,"isEnabled":true,"type":true},"filters":{"user":{"uuid":v.User}}},"Instance":{"projection":{"uuid":true,"name":true,"logDateAdded":true},"filters":{"uuid":v.Instance}},"UserPermission":{"projection":{"uuid":true,"permissionInstance":true},"filters":{"user":{"uuid":v.User}}},"PermissionInstance":{"projection":{"uuid":true,"permission":true},"filters":{"instance":{"uuid":v.Instance}}},"UserToken":{"projection":{"uuid":true,"token":true,"logDateAdded":true,"ip":true,"userAgent":true},"filters":{"user":{"uuid":v.User}}}}};
const one = (_v: { Instance: string | number; User: string | number }) => { return {"Instance":{"projection":{"uuid":true,"logDateAdded":true,"name":true},"filters":{}},"User":{"projection":{"uuid":true,"email":true},"filters":{"firstName":"john"}}}};
const two = (v: { Instance: string | number; User: string | number }) => { return {"Instance":{"projection":{"uuid":true,"name":true},"filters":{}},"PermissionInstance":{"projection":{"uuid":true},"filters":{"instance":{"uuid":v.Instance}}}}};
const submodels: [
    T.Permissions,
    (v: { Instance: string | number; User: string | number }) => ModelConstraints
  ][] = [[T.Permissions.admin, admin],[T.Permissions.app, app],[T.Permissions.one, one],[T.Permissions.two, two]];

export default submodels;